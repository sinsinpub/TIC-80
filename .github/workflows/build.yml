name: Build

on: [push]

env:
  BUILD_TYPE: MinSizeRel

jobs:

# === Windows XP SDL2 ===
  winxp-sdl:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Build
      shell: cmd
      run: |
        cd build
        cmake -G "Visual Studio 16 2019" -A Win32 -T v141_xp -DCMAKE_BUILD_TYPE=%BUILD_TYPE% -DBUILD_PRO=On ..
        cmake --build . --config %BUILD_TYPE% --parallel

    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-winxp-sdl'
        path: build/bin/tic80.exe

# === Windows SDL2 ===
  windows-sdl:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Build
      shell: cmd
      run: |
        cd build
        cmake -G "Visual Studio 16 2019" -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ..
        cmake --build . --config %BUILD_TYPE% --parallel

    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-windows-sdl'
        path: build/bin/tic80.exe

# === Windows SDL2 PRO ===
  windows-sdl-pro:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Build
      shell: cmd
      run: |
        cd build
        cmake -G "Visual Studio 16 2019" -DCMAKE_BUILD_TYPE=%BUILD_TYPE% -DBUILD_PRO=On ..
        cmake --build . --config %BUILD_TYPE% --parallel

    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-windows-sdl-pro'
        path: build/bin/tic80.exe

# === Windows SDLGPU PRO ===
  windows-sdlgpu-pro:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Build
      shell: cmd
      run: |
        cd build
        cmake -G "Visual Studio 16 2019" -DBUILD_SDLGPU=On -DCMAKE_BUILD_TYPE=%BUILD_TYPE% -DBUILD_PRO=On ..
        cmake --build . --config %BUILD_TYPE% --parallel

    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-windows-sdlgpu-pro'
        path: build/bin/tic80.exe

# === Windows Sokol ===
  windows-sokol:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Build
      shell: cmd
      run: |
        cd build
        cmake -G "Visual Studio 16 2019" -DBUILD_SDL=Off -DBUILD_SOKOL=On -DCMAKE_BUILD_TYPE=%BUILD_TYPE% -DBUILD_PRO=On ..
        cmake --build . --config %BUILD_TYPE% --parallel
        cp bin/tic80-sokol.exe bin/tic80.exe
    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-windows-sokol'
        path: build/bin/tic80.exe

# === Ubuntu SDL2 ===
  linux-sdl:
    runs-on: ubuntu-16.04

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install libglu1-mesa-dev libasound2-dev libpulse-dev libaudio-dev libsamplerate0-dev -y

    - name: Build
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE --parallel
        cpack

    - name: Deploy DEB
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-linux-sdl-deb'
        path: build/tic80.deb

    - name: Deploy ZIP
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-linux-sdl'
        path: build/bin/tic80

# === Ubuntu SDL2 PRO ===
  linux-sdl-pro:
    runs-on: ubuntu-16.04

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install libglu1-mesa-dev libasound2-dev libpulse-dev libaudio-dev libsamplerate0-dev -y

    - name: Build
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_PRO=On ..
        cmake --build . --config $BUILD_TYPE --parallel
        cpack

    - name: Deploy DEB
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-linux-sdl-pro-deb'
        path: build/tic80.deb

    - name: Deploy ZIP
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-linux-sdl-pro'
        path: build/bin/tic80

# === Raspberry PI ===
  rpi:
    runs-on: ubuntu-latest
    container: nesbox/rpi-tic80:latest

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Build
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_PRO=On -DCMAKE_TOOLCHAIN_FILE=rpi/toolchain.cmake ..
        cmake --build . --config $BUILD_TYPE --parallel
        cpack

    - name: Deploy DEB
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-rpi-dep'
        path: build/tic80.deb

    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-rpi'
        path: build/bin/tic80

# === Raspberry PI 1-3 Bare Metal ===
  rpi-baremetal:
    runs-on: ubuntu-latest
    container: nesbox/baremetalpi-tic80:latest

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Prebuild
      run: |
        cd vendor/circle-stdlib
        ./configure -r 3
        make -j$(nproc)
        cd libs/circle/addon/vc4/sound/
        make -j$(nproc)
        cd ../vchiq
        make -j$(nproc)
        cd ../../linux
        make -j$(nproc)

    - name: Build
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_PRO=On -DCMAKE_TOOLCHAIN_FILE=baremetalpi/toolchain.cmake ..
        make tic80studio -j$(nproc)
        cd baremetalpi
        make -j$(nproc)
        cd ../../vendor/circle-stdlib/libs/circle/boot/
        make -j$(nproc)

    - name: Pack
      run: |
        cp build/baremetalpi/kernel8-32.img vendor/circle-stdlib/libs/circle/boot/kernel.img
        cp build/baremetalpi/boot/config.txt vendor/circle-stdlib/libs/circle/boot/config.txt

    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-baremetal'
        path: |
          vendor/circle-stdlib/libs/circle/boot/config.txt
          vendor/circle-stdlib/libs/circle/boot/kernel.img
          vendor/circle-stdlib/libs/circle/boot/bootcode.bin
          vendor/circle-stdlib/libs/circle/boot/start.elf
          vendor/circle-stdlib/libs/circle/boot/fixup.dat
          vendor/circle-stdlib/libs/circle/boot/LICENCE.broadcom

# === Nintendo 3DS build ===
  nintendo-3ds:
    runs-on: ubuntu-latest
    container: nesbox/devkitpro-tic80:latest

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Build
      run: |
        cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=$DEVKITPRO/3ds.cmake -DN3DS=TRUE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_PRO=On ..
        make -j$(nproc)

    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-nintendo-3ds'
        path: build/bin/tic80.3dsx

# === MacOS 10.15 SDL2 ===
  macos-sdl:
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Install
      run: brew uninstall --ignore-dependencies libidn2

    - name: Build
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE --parallel
        cpack
        cp *.dmg tic80.dmg

    - name: Deploy DMG
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-macos-sdl-dmg'
        path: build/tic80.dmg

    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-macos-sdl'
        path: build/bin/tic80

# === MacOS 10.15 SDL2 PRO ===
  macos-sdl-pro:
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Install
      run: brew uninstall --ignore-dependencies libidn2

    - name: Build
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_PRO=On ..
        cmake --build . --config $BUILD_TYPE --parallel
        cpack
        cp *.dmg tic80.dmg

    - name: Deploy DMG
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-macos-sdl-pro-dmg'
        path: build/tic80.dmg

# === Android ===
  android:
    runs-on: ubuntu-latest
    container: nesbox/android-tic80:latest

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Build
      run: |
        cd build/android
        ./gradlew assembleRelease
        cp app/build/outputs/apk/release/app-release.apk tic80.apk

    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-android'
        path: build/android/tic80.apk

# === Web Assembly ===
  wasm:
    runs-on: ubuntu-latest

    steps:
    - uses: mymindstorm/setup-emsdk@v7

    - uses: actions/checkout@v2
      with: 
        submodules: recursive
        fetch-depth: 0

    - name: Build
      run: |
        cd build
        emcmake cmake -DBUILD_SDLGPU=On -DCMAKE_BUILD_TYPE=$BUILD_TYPE ..
        cmake --build . --config $BUILD_TYPE --parallel
        cp html/export.html bin/index.html
        cp bin/tic80.js webapp/tic80.js
        cp bin/tic80.wasm webapp/tic80.wasm

    - name: Deploy
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-wasm'
        path: |
          build/bin/tic80.js
          build/bin/tic80.wasm
          build/bin/index.html

    - name: Deploy WebApp
      uses: actions/upload-artifact@v2
      with:
        name: 'tic80-webapp'
        path: |
          build/webapp/index.html
          build/webapp/serviceworker.js
          build/webapp/tic80-180.png
          build/webapp/tic80-192.png
          build/webapp/tic80-512.png
          build/webapp/tic80.webmanifest
          build/webapp/tic80.js
          build/webapp/tic80.wasm

